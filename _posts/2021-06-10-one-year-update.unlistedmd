
The kids are looking forward to meeting again on Monday! I just wanted to give a brief update on their progress.

The class switched to using a single shared game implementation, and by Monday they will have tested out their custom strategies against a default player. They're also in the process of writing unit tests for this shared implementation.

The game version is level 3, which is the simplest level that permits interesting strategies (this was the level described in the initial writeupÂ I sent along prior to the first meeting). The optimal strategy depends on how aggressive the opponent's strategy is, i.e. how long the opponent will wait before attacking. So a good strategy will likely have to find an inexpensive way to predict the opponent's intentions.

In the near future, I'm going to introduce the kids to game trees. However, I think the Space Empires game is too complex for the kids to use game trees right off the bat, so my plan is for the kids to first build a simple tic-tac-toe playing agent that uses a game tree, and then gradually scale up to more complicated games until they're comfortable enough with the concept to apply it to Space Empires.

In the meantime, I'm thinking that the kids can still make some interesting progress on their level 3 strategies by framing it as a simple update problem: they can represent the aggression level of a strategy as a number between 0 and 1, estimate their opponent's aggression level, and update their own aggression level accordingly.

Lastly, we've had to make some modifications to Eurisko's "build everything from scratch" philosophy because the amount of time students were spending debugging and writing new tests for their machine learning / dataframe / matrix classes was getting out of hand and significantly slowing down the progress of the class. The new philosophy is that students should always build the first version of a class from scratch to get an understanding of how it works, but once they've done that they can switch to using libraries like numpy, pandas, and scikit-learn. This has the added benefit that students will be better prepared for future internships that assume knowledge of these tools. Along the same lines, using a single shared game implementation will give students more experience using GitHub as part of a team, which requires them to practice pull requests, merges, and code review.
